digraph platform_bus{
	node[shape=record];

	subgraph cluster_struct_bus_type{
		label="struct bus_type";
		bgcolor="pink";
		"struct bus_type"[label="{
		const char      *name
    |const char      *dev_name
    |struct device       *dev_root
    |struct device_attribute *dev_attrs
    |const struct attribute_group **bus_groups;
    |const struct attribute_group **dev_groups;
    |const struct attribute_group **drv_groups;
    |int (*match)(struct device *dev, struct device_driver *drv);
    |int (*uevent)(struct device *dev, struct kobj_uevent_env *env);
    |int (*probe)(struct device *dev);
    |int (*remove)(struct device *dev);
    |void (*shutdown)(struct device *dev);
    |int (*online)(struct device *dev);
    |int (*offline)(struct device *dev);
    |int (*suspend)(struct device *dev, pm_message_t state);
    |int (*resume)(struct device *dev);
    |const struct dev_pm_ops *pm;
    |const struct iommu_ops *iommu_ops;
    |<subsys>struct subsys_private *p;
    |struct lock_class_key lock_key;
		}"];
	}

	"struct bus_type":subsys->"struct subsys_private"[color=blue];

	subgraph cluster_struct_subsys_private{
		label="struct subsys_private";
		"struct subsys_private"[label="{
		struct kset subsys;
    |struct kset *devices_kset;
    |struct list_head interfaces;
    |struct mutex mutex;
    |struct kset *drivers_kset;
    |<devices>struct klist klist_devices;
    |struct klist klist_drivers;
    |struct blocking_notifier_head bus_notifier;
    |unsigned int drivers_autoprobe:1;
    |struct bus_type *bus;
    |struct kset glue_dirs;
    |struct class *class;
	}"];
	}

	"struct subsys_private":devices->"struct klist"[color=red];

	subgraph cluster_struct_device{
		label="struct device";
		"struct device"[label="{
		struct device  *parent
		|<private>struct device_private  *p
		|struct kobject kobj
		|const char  *init_name
		|const struct device_type *type
		|struct mutex        mutex
		|<bus>struct bus_type *bus
		|struct device_driver *driver
		|void     *platform_data
		|void     *driver_data
		|struct dev_pm_info  power
		|struct dev_pm_domain    *pm_domain
    |struct irq_domain   *msi_domain;
    |struct dev_pin_info *pins;
    |struct list_head    msi_list;
    |int     numa_node
    |u64     *dma_mask
    |u64     coherent_dma_mask
    |unsigned long   dma_pfn_offset
    |struct device_dma_parameters *dma_parms;
    |struct list_head    dma_pools
    |struct dma_coherent_mem *dma_mem
    |struct cma *cma_area
    |struct dev_archdata archdata
    |struct device_node  *of_node
    |struct fwnode_handle    *fwnode
    |dev_t           devt
    |u32         id
    |spinlock_t      devres_lock;
    |struct list_head    devres_head;
    |struct klist_node   knode_class;
    |struct class        *class;
    |const struct attribute_group **groups
	|void    (*release)(struct device *dev);
    |struct iommu_group  *iommu_group;
    |bool            offline_disabled:1;
    |bool            offline:1;
	}"];
	}
	"struct device":private->"struct device_private"[color=red];
	"struct device":bus->"struct bus_type"[color=red];
	subgraph cluster_struct_device_private{
		label="struct device_private";
		"struct device_private"[label="{
		struct klist klist_children
    |struct klist_node knode_parent
    |struct klist_node knode_driver
    |struct klist_node knode_bus
    |struct list_head deferred_probe
    |struct device *device
	}"];
	}

	subgraph cluster_struct_klist{
		label="struct klist";
		"struct klist"[label="{
	|spinlock_t      k_lock
    |<list>struct list_head    k_list
    |void       (*get)(struct klist_node *)
    |void       (*put)(struct klist_node *)
		}"];
	}
	"struct klist":list->"struct list_head"[color=blue];

	subgraph cluster_struct_klist_iter{
		label="struct klist_iter";
		"struct klist_iter"[label="{
		|<i_klist>struct klist        *i_klist
    	|<cur>struct klist_node   *i_cur
	}"];
	}
	"struct klist_iter":i_klist->"struct klist"[color=purple];
	"struct klist_iter":cur->"struct klist_node"[color=purple];
	subgraph cluster_struct_klist_node{
		label="struct klist_node";
		"struct klist_node"[label="{
		void            *n_klist
    |<n_node>struct list_head    n_node;
    |struct kref     n_ref;
	}"];
	}
	"struct klist_node":n_node->"struct list_head"[color=red];
	subgraph cluster_struct_list_head{
		label="struct list_head";
		"struct list_head"[label="{
		struct list_head *next
		|struct list_head *prev
	}"];
	}

}
