digraph platform_bus{
	node[shape=record];

	subgraph cluster_struct_bus_type{
		label="struct bus_type";
		bgcolor="pink";
		"struct bus_type"[label="{
		const char      *name
    |const char      *dev_name
    |struct device       *dev_root
    |struct device_attribute *dev_attrs
    |const struct attribute_group **bus_groups;
    |const struct attribute_group **dev_groups;
    |const struct attribute_group **drv_groups;
    |int (*match)(struct device *dev, struct device_driver *drv);
    |int (*uevent)(struct device *dev, struct kobj_uevent_env *env);
    |int (*probe)(struct device *dev);
    |int (*remove)(struct device *dev);
    |void (*shutdown)(struct device *dev);
    |int (*online)(struct device *dev);
    |int (*offline)(struct device *dev);
    |int (*suspend)(struct device *dev, pm_message_t state);
    |int (*resume)(struct device *dev);
    |const struct dev_pm_ops *pm;
    |const struct iommu_ops *iommu_ops;
    |<subsys>struct subsys_private *p;
    |struct lock_class_key lock_key;
		}"];
	}

	"struct bus_type":subsys->"struct subsys_private"[color=blue];

	subgraph cluster_struct_subsys_private{
		label="struct subsys_private";
		"struct subsys_private"[label="{
		struct kset subsys;
    |<dev_kset>struct kset *devices_kset;
    |struct list_head interfaces;
    |struct mutex mutex;
    |struct kset *drivers_kset;
    |<devices>struct klist klist_devices;
    |struct klist klist_drivers;
    |struct blocking_notifier_head bus_notifier;
    |unsigned int drivers_autoprobe:1;
    |struct bus_type *bus;
    |struct kset glue_dirs;
    |struct class *class;
	}"];
	}
	"struct subsys_private":dev_kset->"struct kset"[color=red];
	"struct subsys_private":devices->"struct klist"[color=red];

	subgraph cluster_struct_kset{
		label="struct kset";
		"struct kset"[label="{
		struct list_head list;
    |spinlock_t list_lock;
    |<obj>struct kobject kobj;
    |const struct kset_uevent_ops *uevent_ops\n
	****当任何kobj需要上报uevent的时候都需要通过kset的ops进行过滤****\n
	****和添加环境变量,没有kset的kobject是不允许上报uevent的*********
	}"];
	}

	"struct kset":obj->"struct kobject"[color=blue];
	subgraph cluster_struct_dev_pin_info{
		label="struct dev_pin_info";
		"struct dev_pin_info"[label="{
			<p>struct pinctrl *p;
    |struct pinctrl_state *default_state;
    |struct pinctrl_state *sleep_state;
    |struct pinctrl_state *idle_state;
		}"];
	}
	"struct device":pins->"struct dev_pin_info"[color=blue];
	"struct dev_pin_info":p->"struct pinctrl";

	subgraph cluster_struct_pinctrl{
		label="struct pinctrl";
		"struct pinctrl"[label="{
		struct list_head node;
    |struct device *dev;
    |struct list_head states;
    |struct pinctrl_state *state;
    |struct list_head dt_maps;
    |struct kref users;
	}"];
	}

	subgraph cluster_struct_pinctrl_dev{
		label="struct pinctrl_dev";
		"struct pinctrl_dev"[label="{
		struct list_head node****用于挂接到全局的controller list(pinctrldev_list)当中去
    |<desc>struct pinctrl_desc *desc*****初始化pin controller用到的描述符
    |struct radix_tree_root pin_desc_tree;
    |<ranges>struct list_head gpio_ranges****由该controller处理的gpio ranges, 系统当中所有的gpio是分片的**
    |struct device *dev;
    |struct module *owner;
    |void *driver_data;
    |<p>struct pinctrl *p;
    |struct pinctrl_state *hog_default;
    |struct pinctrl_state *hog_sleep;
    |struct mutex mutex;
    |struct dentry *device_root;
	}"];
	}
	"struct pinctrl_dev":ranges->"struct pinctrl_gpio_range"[color=red];
	subgraph cluster_struct_pinctrl_gpio_range{
		label="struct pinctrl_gpio_range";
		"struct pinctrl_gpio_range"[label="{
			struct list_head node
    |const char *name
    |unsigned int id
    |unsigned int base
    |unsigned int pin_base
    |unsigned const *pins
    |unsigned int npins
    |struct gpio_chip *gc
		}"];
	}

	"struct pinctrl_dev":p->"struct pinctrl";
	"struct pinctrl_dev":desc->"struct pinctrl_desc"[color=blue];
	subgraph cluster_struct_pinctrl_desc{
		label="struct pinctrl_desc";
		"struct pinctrl_desc"[label="{
		const char *name;
    |<pins>struct pinctrl_pin_desc const *pins****pin脚描述符***
    |unsigned int npins;
    |const struct pinctrl_ops *pctlops;
    |const struct pinmux_ops *pmxops;
    |const struct pinconf_ops *confops;
    |struct module *owner;
	}"];
	}
	msm_pinctrl_desc_node[bgcolor=blue];
	"struct pinctrl_desc"->msm_pinctrl_desc_node[arrowhead=none color=red];
	"struct pinctrl_desc":pins->"struct msm_pinctrl_soc_data":pins[arrowhead=none color=blue];
	"struct pinctrl_desc":pins->"struct pinctrl_pin_desc"[color=red];
	subgraph cluster_struct_pinctrl_pin_desc{
		label="struct pinctrl_pin_desc";
		"struct pinctrl_pin_desc"[label="{
			unsigned number
			|const char *name
			|void *drv_data
		}"];
	}

	subgraph cluster_struct_platform_device{
		label="struct platform_device";
		"struct platform_device"[label="{
		 const char  *name;
    	|int     id;
    	|bool        id_auto;
    	|<dev>struct device   dev;
    	|u32     num_resources;
    	|struct resource *resource;
    	|const struct platform_device_id *id_entry;
    	|char *driver_override
    	|struct mfd_cell *mfd_cell;
    	|struct pdev_archdata    archdata;
	}"];
	}
	subgraph cluster_struct_platform_driver{
		label="struct platform_driver";
		"struct platform_driver"[label="{
			int (*probe)(struct platform_device *)
			|int (*remove)(struct platform_device *)
			|void (*shutdown)(struct platform_device *)
			|int (*suspend)(struct platform_device *, pm_message_t state)
			|int (*resume)(struct platform_device *)
			|<driver>struct device_driver driver
			|const struct platform_device_id *id_table
		}"];
	}

	"struct platform_device":dev->"struct device"[color=red];
	"struct platform_driver":driver->"struct device_driver"[color=red];

	subgraph cluster_struct_device{
		label="struct device";
		"struct device"[label="{
		struct device  *parent
		|<private>struct device_private  *p
		|struct kobject kobj
		|const char  *init_name
		|const struct device_type *type
		|struct mutex        mutex
		|<bus>struct bus_type *bus
		|<driver>struct device_driver *driver
		|void     *platform_data
		|void     *driver_data
		|struct dev_pm_info  power
		|<pm_domain>struct dev_pm_domain    *pm_domain
    |<irq>struct irq_domain   *msi_domain;
    |<pins>struct dev_pin_info *pins;
    |struct list_head    msi_list;
    |int     numa_node
    |u64     *dma_mask
    |u64     coherent_dma_mask
    |unsigned long   dma_pfn_offset
    |struct device_dma_parameters *dma_parms;
    |struct list_head    dma_pools
    |struct dma_coherent_mem *dma_mem
    |struct cma *cma_area
    |struct dev_archdata archdata
    |struct device_node  *of_node
    |struct fwnode_handle    *fwnode
    |dev_t           devt
    |u32         id
    |spinlock_t      devres_lock;
    |struct list_head    devres_head;
    |struct klist_node   knode_class;
    |<class>struct class        *class;
    |const struct attribute_group **groups
	|void    (*release)(struct device *dev);
    |struct iommu_group  *iommu_group;
    |bool            offline_disabled:1;
    |bool            offline:1;
	}"];
	}
	"struct device":driver->"struct device_driver"[color=blue];
	"struct device":class->"struct class"[color=red];
	"struct device":irq->"struct irq_domain"[color=brown label="msi_domain"];

	subgraph cluster_struct_class{
		label="struct class";
		"struct class"[label="{
		const char      *name
    	|struct module       *owner
    	|struct class_attribute      *class_attrs
    |struct device_attribute     *dev_attrs
    |struct bin_attribute        *dev_bin_attrs
    |struct kobject          *dev_kobj
    |int (*dev_uevent)(struct device *dev, struct kobj_uevent_env *env)
    |char *(*devnode)(struct device *dev, umode_t *mode)
    |void (*class_release)(struct class *class)
    |void (*dev_release)(struct device *dev)
    |int (*suspend)(struct device *dev, pm_message_t state)
    |int (*resume)(struct device *dev);
    |const struct kobj_ns_type_operations *ns_type;
    |const void *(*namespace)(struct device *dev);
    |const struct dev_pm_ops *pm;
    |struct subsys_private *p;
	}"];
	}

	subgraph cluster_struct_device_driver{
		label="struct device_driver";
		bgcolor="powderblue";
		"struct device_driver"[label="{
		const char      *name;
    	|struct bus_type     *bus;
    	|struct module       *owner;
    	|const char      *mod_name\n****used for built-in modules***
    	|bool suppress_bind_attrs\n*****disables bind\/unbind via sysfs****
    	|<of_device>const struct of_device_id   *of_match_table
    	|const struct acpi_device_id *acpi_match_table
    	|int (*probe) (struct device *dev);
    	|int (*remove) (struct device *dev);
    	|void (*shutdown) (struct device *dev);
    	|int (*suspend) (struct device *dev, pm_message_t state);
    	|int (*resume) (struct device *dev);
    	|const struct attribute_group **groups;
    	|const struct dev_pm_ops *pm;
    	|struct driver_private *p;
		}"];
	}
	"struct device_driver":of_device->"struct of_device_id"[color=blue];
	subgraph cluster_struct_of_device_id{
		label="struct of_device_id";
		bgcolor="pink";
		"struct of_device_id"[label="{
		 char    name[32];
    	|char    type[32];
    	|char    compatible[128];
    	|const void *data;
	}"];
	}

	"struct device":pm_domain->"struct dev_pm_domain"[color=blue];
	"struct device":private->"struct device_private"[color=red];
	"struct device":bus->"struct bus_type"[color=red];
	subgraph cluster_struct_device_private{
		label="struct device_private";
		"struct device_private"[label="{
		struct klist klist_children
    |struct klist_node knode_parent
    |struct klist_node knode_driver
    |struct klist_node knode_bus
    |struct list_head deferred_probe
    |struct device *device
	}"];
	}

	subgraph cluster_struct_dev_pm_domain{
		label="struct dev_pm_domain";
		"struct dev_pm_domain"[label="{
			struct dev_pm_ops   ops;
    |void (*detach)(struct device *dev, bool power_off);
    |int (*activate)(struct device *dev);
    |void (*sync)(struct device *dev);
    |void (*dismiss)(struct device *dev);
		}"];
	}

	subgraph cluster_struct_klist{
		label="struct klist";
		"struct klist"[label="{
	|spinlock_t      k_lock
    |<list>struct list_head    k_list
    |void       (*get)(struct klist_node *)
    |void       (*put)(struct klist_node *)
		}"];
	}
	"struct klist":list->"struct list_head"[color=blue];

	subgraph cluster_struct_klist_iter{
		label="struct klist_iter";
		"struct klist_iter"[label="{
		|<i_klist>struct klist        *i_klist
    	|<cur>struct klist_node   *i_cur
	}"];
	}
	"struct klist_iter":i_klist->"struct klist"[color=purple];
	"struct klist_iter":cur->"struct klist_node"[color=purple];
	subgraph cluster_struct_klist_node{
		label="struct klist_node";
		"struct klist_node"[label="{
		void            *n_klist
    |<n_node>struct list_head    n_node;
    |struct kref     n_ref;
	}"];
	}
	"struct klist_node":n_node->"struct list_head"[color=red];
	subgraph cluster_struct_list_head{
		label="struct list_head";
		"struct list_head"[label="{
		struct list_head *next
		|struct list_head *prev
	}"];
	}

	subgraph cluster_struct_kobject{
		label="struct kobject";
		"struct kobject"[label="{
	****kobject在析构时会通过ktype来析构其派生的数据结构体****
	|const char      *name;
    |struct list_head    entry;
    |struct kobject      *parent;
    |struct kset     *kset;
    |<ktype>struct kobj_type    *ktype;\n***ktype里面包含有操作kobj的函数和针对sysfs操作的函数****
    |struct kernfs_node  *sd
    |struct kref     kref;
    |struct delayed_work release;
    |unsigned int state_initialized:1;
    |unsigned int state_in_sysfs:1;
    |unsigned int state_add_uevent_sent:1;
    |unsigned int state_remove_uevent_sent:1;
    |unsigned int uevent_suppress:1;
	}"];
	}
	"struct kobject":ktype->"struct kobj_type"[color=red];

	subgraph cluster_struct_kobj_type{
		label="struct kobj_type";
		"struct kobj_type"[label="{
		 void (*release)(struct kobject *kobj)
    	|const struct sysfs_ops *sysfs_ops
    	|struct attribute **default_attrs
    	|const struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *kobj)
    	|const void *(*namespace)(struct kobject *kobj)
	}"];
	}

	subgraph cluster_struct_msm_pinctrl{
		label="struct msm_pinctrl";
		"struct msm_pinctrl"[label="{
		struct device *dev;
    	|<pctrl>struct pinctrl_dev *pctrl
    	|<chip>struct gpio_chip chip
    	|struct notifier_block restart_nb
    	|int irq
    	|spinlock_t lock
    	|DECLARE_BITMAP(dual_edge_irqs, MAX_NR_GPIO)
    	|DECLARE_BITMAP(enabled_irqs, MAX_NR_GPIO)
    	|<soc>const struct msm_pinctrl_soc_data *soc
    	|void __iomem *regs
		}"];
	}
	"struct msm_pinctrl":chip->"struct gpio_chip"[color=red];
	"struct msm_pinctrl":pctrl->"struct pinctrl_dev"[color=purple];
	"struct msm_pinctrl":soc->"struct msm_pinctrl_soc_data"[color=blue];

	subgraph cluster_struct_msm_pinctrl_soc_data{
		label="struct msm_pinctrl_soc_data";
		bgcolor="pink";
		"struct msm_pinctrl_soc_data"[label="{
	|<pins>const struct pinctrl_pin_desc *pins\n
	an array describe all pins the controller affects
    |unsigned npins
    |<functions>const struct msm_function *functions\n
    an array of all mux function controller supports
    |unsigned nfunctions;
    |<groups>const struct msm_pingroup *groups;
    |unsigned ngroups;
    |unsigned ngpios;
		}"];
	}

	"struct msm_pinctrl_soc_data":groups->"struct msm_pingroup"[color=blue];

	subgraph cluster_struct_msm_pingroup{
		label="struct msm_pingroup";
		"struct msm_pingroup"[label="{
	 const char *name
    |const unsigned *pins
    |unsigned npins
    |unsigned *funcs
    |unsigned nfuncs
    |u32 ctl_reg
    |u32 io_reg
    |u32 intr_cfg_reg
    |u32 intr_status_reg
    |u32 intr_target_reg
    |unsigned mux_bit:5
    |unsigned pull_bit:5
    |unsigned drv_bit:5
    |unsigned oe_bit:5
    |unsigned in_bit:5
    |unsigned out_bit:5
    |unsigned intr_enable_bit:5
    |unsigned intr_status_bit:5
    |unsigned intr_ack_high:1
    |unsigned intr_target_bit:5
    |unsigned intr_target_kpss_val:5
    |unsigned intr_raw_status_bit:5
    |unsigned intr_polarity_bit:5
    |unsigned intr_detection_bit:5
    |unsigned intr_detection_width:5
		}"];
	}

	"struct msm_pinctrl_soc_data":functions->"struct msm_function"[color=red];
	subgraph cluster_struct_msm_function{
		label="struct msm_function";
		bgcolor="cyan";
		"struct msm_function"[label="{
		const char *name
    	|const char * const *groups
    	|unsigned ngroups
	}"];
	}

	subgraph cluster_struct_pinctrl_map{
		label="struct pinctrl_map";
		"struct pinctrl_map"[label="{
		const char *dev_name
    |const char *name
    |enum pinctrl_map_type type;
    |const char *ctrl_dev_name;
	|{struct pinctrl_map_mux mux|struct pinctrl_map_configs configs}
	}"];
	}

	subgraph cluster_struct_msm_pinctrl_dd{
		label="struct msm_pinctrl_dd";
		"struct msm_pinctrl_dd"[label="{
	 |void __iomem *base
    |int irq
    |unsigned int num_pins
    |struct msm_pindesc *msm_pindesc
    |unsigned int num_pintypes
    |<msm_pintype>struct msm_pintype_info *msm_pintype
    |<pctl>struct pinctrl_desc pctl
    |<pctl_dev>struct pinctrl_dev *pctl_dev
    |struct msm_pin_grps *pin_grps
    |unsigned int num_grps
    |struct  msm_pmx_funcs *pmx_funcs
    |unsigned int num_funcs
    |struct device *dev
		}"];
	}
	"struct msm_pinctrl_dd":msm_pintype->"struct msm_pintype_info"[color=brown];
	"struct msm_pinctrl_dd":pctl->"struct pinctrl_desc pctl"[color=blue];
	"struct msm_pinctrl_dd":pctl_dev->"struct pinctrl_dev"[color=blue];
	"struct msm_pinctrl_dd"->"struct msm_tlmm_desc"[arrowhead=none color=blue];

	subgraph cluster_struct_msm_tlmm_desc{
		label="struct msm_tlmm_desc";
		"struct msm_tlmm_desc"[label="{
	void __iomem *base;
    |int irq;
    |unsigned int num_pintypes;
    |<pintypes>struct msm_pintype_info *pintypes;
		}"];
	}
	subgraph cluster_struct_msm_pintype_info{
		label="struct msm_pintype_info";
		bgcolor="pink";
		"struct msm_pintype_info"[label="{
	|int (*prg_cfg)(uint pin_no, unsigned long *config,
               \nbool rw, const struct msm_pintype_info *pinfo);
    |void (*prg_func)(uint pin_no, u32 func, bool enable,
             \nconst struct msm_pintype_info *pinfo);
    |int (*init_irq)(int irq, struct msm_pintype_info *pinfo,
            \nstruct device *tlmm_dev);
    |void (*set_reg_base)(void __iomem *tlmm_base,
                 \nstruct msm_pintype_info *pinfo);
    |void __iomem *reg_base;
    |const char *name;
    |u32 num_pins;
    |int pin_start;
    |int pin_end;
    |<gc>struct gpio_chip gc;
    |struct msm_tlmm_irq_chip *irq_chip;
    |bool supports_gpio;
    |struct pinctrl_gpio_range grange;
    |struct device_node *node;
    |<pintype>const struct msm_pintype_data *pintype_data;
	}"];
	}
	"struct msm_tlmm_desc":pintypes->"struct msm_pintype_info"[color=blue];
	"struct msm_pintype_info":gc->"struct gpio_chip"[color=red];
	"struct msm_pintype_info":pintype->"struct msm_pintype_data"[color=blue];

	subgraph cluster_struct_msm_pintype_data{
		label="struct msm_pintype_data";
		"struct msm_pintype_data"[label=<
		<table>
			<tr>
				<td>unsigned long reg_base_offset</td>
			</tr>
			<tr>
				<td>u32 gp_reg_size</td>
				<td>s32 sdc_reg_offsets[MSM_PINTYPE_SDC_REGS_MAX]</td>
				<td>s32 ebi_reg_offsets[MSM_PINTYPE_EBI_REGS_MAX]</td>
			</tr>
		</table>
		>];
	}

	subgraph cluster_struct_gpio_chip{
		label="struct gpio_chip";
		"struct gpio_chip"[label="{
			const char      *label;
	|<gpiodev>struct gpio_device  *gpiodev
    |struct device       *parent
    |struct module       *owner;
    |struct list_head        list;
    |int         (*request)(struct gpio_chip *chip,
                        \nunsigned offset);
    |void            (*free)(struct gpio_chip *chip,
                        \nunsigned offset);
    |int         (*get_direction)(struct gpio_chip *chip,
                        \nunsigned offset);
    |int         (*direction_input)(struct gpio_chip *chip,
                        \nunsigned offset);
    |int         (*get)(struct gpio_chip *chip,
                        \nunsigned offset);
    |int         (*direction_output)(struct gpio_chip *chip,
                        \nunsigned offset, int value);
    |int         (*set_debounce)(struct gpio_chip *chip,
                        \nunsigned offset, unsigned debounce)
    |void    (*set)(struct gpio_chip *chip,
                \nunsigned offset, int value)
    |int     (*to_irq)(struct gpio_chip *chip,
                        \nunsigned offset);
    |void            (*dbg_show)(struct seq_file *s,
                        \nstruct gpio_chip *chip);
    |<base>int         base
    |u16         ngpio;
    |struct gpio_desc    *desc;
    |const char      *const *names;
    |unsigned        can_sleep:1;
    |unsigned        exported:1;
    |struct device_node *of_node;
    |int of_gpio_n_cells;
    |int (*of_xlate)(struct gpio_chip *gc,
                \nconst struct of_phandle_args *gpiospec, u32 *flags)
	|struct list_head pin_ranges
		}"];
	}
	"struct gpio_chip":gpiodev->"struct gpio_device"[color=blue];
	"struct gpio_chip":base->"struct gpio_device":base[arrowhead=none color=purple];
	subgraph cluster_struct_gpio_device{
		label="struct gpio_device";
		"struct gpio_device"[label="{
		int         id;
    |struct device       dev
    |struct cdev     chrdev
    |struct device       *mockdev
    |struct module       *owner
    |<chip>struct gpio_chip    *chip
    |<descs>struct gpio_desc    *descs
    |<base>int         base
    |u16         ngpio
    |char            *label
    |void            *data
    |struct list_head        list
	|struct list_head pin_ranges
	}"];
	}
	"struct gpio_device":descs->"struct gpio_desc"[color=blue];
	"struct gpio_device":chip->"struct gpio_chip"[color=red];
	subgraph cluster_struct_gpio_desc{
		label="struct gpio_desc";
		"struct gpio_desc"[label="{
	|struct gpio_device  *gdev
    |unsigned long       flags
	|const char      *label
	|const char      *name
	}"];

	}	
	
subgraph cluster_struct_irq_domain{
	label="struct irq_domain";
	bgcolor="purple";
	"struct irq_domain"[label="{
*****硬件中断号的翻译实体******
	|struct list_head link
    |const char *name
    |<ops>const struct irq_domain_ops *ops
    |void *host_data
    |unsigned int flags
    |struct fwnode_handle *fwnode
    |enum irq_domain_bus_token bus_token
    |struct irq_domain_chip_generic *gc
    |struct irq_domain *parent
    |irq_hw_number_t hwirq_max\n*****该中断控制器里面最大的hw interrrupt id的值******
    |unsigned int revmap_direct_max_irq
    |unsigned int revmap_size\n***线性映射的size,for radix map和no map，该值是0***
    |struct radix_tree_root revmap_tree
    |unsigned int linear_revmap\[\]\n***线性映射使用到的查找表****
}"];
}

"struct irq_domain":ops->"struct irq_domain_ops"[color=blue label="ops"];

subgraph cluster_struct_irq_domain_ops{
	label="struct irq_domain_ops";
	bgcolor="green";
	"struct irq_domain_ops"[label="{
	int \(*match\)\(struct irq_domain *d, struct device_node *node,\r
                    enum irq_domain_bus_token bus_token\)\r
    |int \(*map\)\(struct irq_domain *d, unsigned int virq, irq_hw_number_t hw\)\r
    |void \(*unmap\)\(struct irq_domain *d, unsigned int virq\)\r
    |int \(*xlate\)\(struct irq_domain *d, struct device_node *node,\r
                    const u32 *intspec, unsigned int intsize,\r
                    unsigned long *out_hwirq, unsigned int *out_type\)\r
	|int \(*alloc\)\(struct irq_domain *d, unsigned int virq,\r
                    unsigned int nr_irqs, void *arg\)\r
    |void \(*free\)\(struct irq_domain *d, unsigned int virq,\r
                     unsigned int nr_irqs\)\r
    |void \(*activate\)\(struct irq_domain *d, struct irq_data *irq_data\)
    |void \(*deactivate\)\(struct irq_domain *d, struct irq_data *irq_data\)
    |int \(*translate\)\(struct irq_domain *d, struct irq_fwspec *fwspec,\r
                         unsigned long *out_hwirq, unsigned int *out_type\)\r
}"];
}

subgraph cluster_struct_irq_common_data{
	label="struct irq_common_data";
	"struct irq_common_data"[label="{
	 unsigned int   state_use_accessors
\lIRQD_TRIGGER_MASK\lIRQD_SETAFFINITY_PENDING\lIRQD_NO_BALANCING\lIRQD_PER_CPU\lIRQD_AFFINITY_SET\lIRQD_LEVEL\lIRQD_WAKEUP_STATE
\lIRQD_MOVE_PCNTXT\lIRQD_IRQ_DISABLED\lIRQD_IRQ_MASKED\lIRQD_IRQ_INPROGRESS\lIRQD_WAKEUP_ARMED\lIRQD_FORWARDED_TO_VCPU
	|unsigned int  node
	|void *handler_data
	|struct msi_desc     *msi_desc
	|cpumask_var_t       affinity
}"];
}

"struct irq_desc":common->"struct irq_common_data"[color=blue arrowhead=open label="irq_common_data"];

subgraph cluster_struct_irq_desc{
	label="struct irq_desc";
	bgcolor="brown";
	"struct irq_desc"[label="{
    |******中断例程描述符******\n****通过virq索引到irq_desc*****
	|<common>struct irq_common_data  irq_common_data
    |<data>struct irq_data     irq_data
    |unsigned int __percpu   *kstat_irqs
    |irq_flow_handler_t  handle_irq
	|<action>struct irqaction    *action
    |unsigned int        status_use_accessors
    |unsigned int        core_internal_state__do_not_mess_with_it
    |unsigned int        depth
    |unsigned int        wake_depth
    |unsigned int        irq_count
    |unsigned long       last_unhandled
    |unsigned int        irqs_unhandled
    |atomic_t        threads_handled
    |int         threads_handled_last
    |raw_spinlock_t      lock
    |struct cpumask      *percpu_enabled
	|const struct cpumask    *affinity_hint
    |struct irq_affinity_notify *affinity_notify
	|cpumask_var_t       pending_mask
	|unsigned long       threads_oneshot
    |atomic_t        threads_active
    |wait_queue_head_t       wait_for_threads
	|unsigned int        nr_actions
    |unsigned int        no_suspend_depth
    |unsigned int        cond_suspend_depth
    |unsigned int        force_resume_depth
	|struct proc_dir_entry   *dir
	|int         parent_irq
    |struct module       *owner
    |const char      *name
}"];
}
"struct irq_desc":action->"struct irqaction"[arrowhead=open color=red];
"struct irq_desc":data->"struct irq_data"[arrowhead=open color=blue label="通过virq找到irq_desc再找到irq_data"];

subgraph cluster_struct_irq_data{
	label="struct irq_data";
	"struct irq_data"[label="{
	u32         mask
    |unsigned int        irq
    |unsigned long       hwirq
    |struct irq_common_data  *common
    |<chip>struct irq_chip     *chip
    |<domain>struct irq_domain   *domain
    |struct irq_data     *parent_data
    |void            *chip_data
}"];
}

"struct irq_data":chip->"struct irq_chip"[arrowhead=open color=blue label="chip"];
"struct irq_data":domain->"struct irq_domain"[arrowhead=open color=blue label="domain"];
subgraph cluster_struct_irq_chip{
	label="struct irq_chip";
    bgcolor="purple";
	"struct irq_chip"[label="{
******代表具体操作中断控制器的功能*****
	|const char  *name
    |unsigned int  \(*irq_startup\)\(struct irq_data *data\)
    |void   \(*irq_shutdown\)\(struct irq_data *data\)
    |void   \(*irq_enable\)\(struct irq_data *data\)
    |void   \(*irq_disable\)\(struct irq_data *data\)
    |void   \(*irq_ack\)\(struct irq_data *data\)
    |void   \(*irq_mask\)\(struct irq_data *data\)
    |void   \(*irq_mask_ack\)\(struct irq_data *data\)
    |void   \(*irq_unmask\)\(struct irq_data *data\)
    |void   \(*irq_eoi\)\(struct irq_data *data\)
    |int    \(*irq_set_affinity\)\(struct irq_data *data, const struct cpumask *dest, bool force\)
    |int    \(*irq_retrigger\)\(struct irq_data *data\)
    |int    \(*irq_set_type\)\(struct irq_data *data, unsigned int flow_type\)
    |int    \(*irq_set_wake\)\(struct irq_data *data, unsigned int on\)
    |void   \(*irq_bus_lock\)\(struct irq_data *data\)
    |void   \(*irq_bus_sync_unlock\)\(struct irq_data *data\)
    |void   \(*irq_cpu_online\)\(struct irq_data *data\)
    |void   \(*irq_cpu_offline\)\(struct irq_data *data\)
    |void   \(*irq_suspend\)\(struct irq_data *data\)
    |void   \(*irq_resume\)\(struct irq_data *data\)
    |void   \(*irq_pm_shutdown\)\(struct irq_data *data\)
    |void   \(*irq_calc_mask\)\(struct irq_data *data\)
    |void   \(*irq_print_chip\)\(struct irq_data *data, struct seq_file *p\)
    |int    \(*irq_request_resources\)\(struct irq_data *data\)
    |void    \(*irq_release_resources\)\(struct irq_data *data\)
    |void  \(*irq_compose_msi_msg\)\(struct irq_data *data, struct msi_msg *msg\)
    |void   \(*irq_write_msi_msg\)\(struct irq_data *data, struct msi_msg *msg\)
    |int   \(*irq_get_irqchip_state\)\(struct irq_data *data, enum irqchip_irq_state which, bool *state\)
    |int  \(*irq_set_irqchip_state\)\(struct irq_data *data, enum irqchip_irq_state which, bool state\)
    |int   \(*irq_set_vcpu_affinity\)\(struct irq_data *data, void *vcpu_info\)
    |unsigned long   flags
}"];
}

subgraph cluster_struct_irqaction{
	label="struct irqaction";
	"struct irqaction"[label="{
	irq_handler_t       handler
    |void            *dev_id
    |void __percpu       *percpu_dev_id
    |struct irqaction    *next
    |irq_handler_t       thread_fn
    |struct task_struct  *thread
    |struct irqaction    *secondary
    |unsigned int        irq
    |unsigned int        flags
    |unsigned long       thread_flags
    |unsigned long       thread_mask
    |const char      *name
    |struct proc_dir_entry   *dir
	}"];
}
	
	
subgraph cluster_struct_gic_chip_data{
	label="struct gic_chip_data";
	bgcolor="yellow";
	"struct gic_chip_data"[label="{
*****这是gic初始化的时候的一个全局性的结构体*****
	|union gic_base dist_base
    |union gic_base cpu_base
	|u32 saved_spi_enable\[DIV_ROUND_UP\(1020, 32\)\]
    |u32 saved_spi_active\[DIV_ROUND_UP\(1020, 32\)\]
    |u32 saved_spi_conf\[DIV_ROUND_UP\(1020, 16\)\]
    |u32 saved_spi_target\[DIV_ROUND_UP\(1020, 4\)\]
    |u32 __percpu *saved_ppi_enable
    |u32 __percpu *saved_ppi_active
    |u32 __percpu *saved_ppi_conf
	|<domain>struct irq_domain *domain
    |unsigned int gic_irqs
}"];
}
"struct gic_chip_data":domain->"struct irq_domain"[color=red label="domain"];
	
subgraph cluster_struct_samsung_pin_ctrl{
	label="struct samsung_pin_ctrl";
	bgcolor="brown";
	"struct samsung_pin_ctrl"[label="{
	 <bank>const struct samsung_pin_bank_data *pin_banks;
	|u32     nr_banks
	|<gpio_init>int     \(*eint_gpio_init\)\(struct samsung_pinctrl_drv_data *\)
	|int     \(*eint_wkup_init\)\(struct samsung_pinctrl_drv_data *\)
	|void    \(*suspend\)\(struct samsung_pinctrl_drv_data *\)
	|void    \(*resume\)\(struct samsung_pinctrl_drv_data *\)
}"];
}

"struct samsung_pin_ctrl":bank->"struct samsung_pin_bank_data"[color="green" arrowhead=open];
"struct samsung_pin_ctrl":gpio_init->"struct samsung_pinctrl_drv_data"[color="blue" arrowhead=open];

subgraph cluster_struct_samsung_pin_bank_data{
    label="struct samsung_pin_bank_data";
    "struct samsung_pin_bank_data"[label="{
    <type>const struct samsung_pin_bank_type *type;
    |u32     pctl_offset;
    |u8      nr_pins;
    |u8      eint_func;
    |enum eint_type  eint_type;
    |u32     eint_mask;
    |u32     eint_offset;
    |const char  *name;
}"];
}

"struct samsung_pin_bank_data":type->"struct samsung_pin_bank_type"[arrowhead=open color=blue label="type"];

subgraph cluster_struct_samsung_pin_bank_type{
    label="struct samsung_pin_bank_type";
    "struct samsung_pin_bank_type"[label="{
     u8 fld_width\[PINCFG_TYPE_NUM\]
    |u8 reg_offset\[PINCFG_TYPE_NUM\]
}"];
}

subgraph cluster_struct_samsung_pinctrl_drv_data{
	label="struct samsung_pinctrl_drv_data";
	"struct samsung_pinctrl_drv_data"[label="{
     struct list_head        node
    |void __iomem            *virt_base
    |struct device           *dev
    |int             irq
    |<desc>struct pinctrl_desc     pctl
    |<dev>struct pinctrl_dev      *pctl_dev
    |const struct samsung_pin_group  *pin_groups
    |unsigned int            nr_groups
    |const struct samsung_pmx_func   *pmx_functions
    |unsigned int            nr_functions
    |<pin_bank>struct samsung_pin_bank     *pin_banks
    |u32             nr_banks
    |unsigned int            pin_base
    |unsigned int            nr_pins
    |void (*suspend)(struct samsung_pinctrl_drv_data *);
    |void (*resume)(struct samsung_pinctrl_drv_data *);
}"];
};
"struct samsung_pinctrl_drv_data":desc->"struct pinctrl_desc"[arrowhead=open color=blue label="pctl"];
"struct samsung_pinctrl_drv_data":dev->"struct pinctrl_dev"[arrowhead=open color=blue label="pctl_dev"];
"struct samsung_pinctrl_drv_data":pin_bank->"struct samsung_pin_bank"[arrowhead=open color=red label="pin_banks"];

subgraph cluster_struct_samsung_pin_bank{
	label="struct samsung_pin_bank";
    bgcolor="purple";
	"struct samsung_pin_bank"[label="{
     const struct samsung_pin_bank_type *type
    |u32     pctl_offset
    |u8      nr_pins
    |u8      eint_func
    |enum eint_type  eint_type
    |u32     eint_mask
    |u32     eint_offset
    |const char  *name
    |u32     pin_base
    |void        *soc_priv
    |struct device_node *of_node
    |struct samsung_pinctrl_drv_data *drvdata
    |struct irq_domain *irq_domain
    |struct gpio_chip gpio_chip
    |struct pinctrl_gpio_range grange
    |struct exynos_irq_chip *irq_chip
    |spinlock_t slock
    |u32 pm_save\[PINCFG_TYPE_NUM + 1\]
	}"];
}

}
	
	
	
	
	
	
	

