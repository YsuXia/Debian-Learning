digraph i2c_designwer{
	node[shape=record];
	subgraph cluster_struct_acpi_buffer{
		label="struct acpi_buffer";
		"struct acpi_buffer"[label="{
		 acpi_size length;
        |void *pointer;
	}"];
	}

	subgraph cluster_struct_acpi_device{
		label="struct acpi_device";
		"struct acpi_device"[label="{
		int device_type;
        |<handle>acpi_handle handle;
        |<fwnode>struct fwnode_handle fwnode;
        |struct acpi_device *parent;
        |struct list_head children;
        |struct list_head node;
        |struct list_head wakeup_list;
        |struct list_head del_list;
        |struct acpi_device_status status;
        |struct acpi_device_flags flags;
        |<pnp>struct acpi_device_pnp pnp;
        |struct acpi_device_power power;
        |struct acpi_device_wakeup wakeup;
        |struct acpi_device_perf performance;
        |struct acpi_device_dir dir;
        |struct acpi_device_data data;
        |struct acpi_scan_handler *handler;
        |struct acpi_hotplug_context *hp;
        |struct acpi_driver *driver;
        |const struct acpi_gpio_mapping *driver_gpios;
        |void *driver_data;
        |struct device dev;
        |unsigned int physical_node_count;
        |unsigned int dep_unmet;
        |<physical_node_list>struct list_head physical_node_list;
        |struct mutex physical_node_lock;
        |void (*remove)(struct acpi_device *);
	}"];
	}
	"struct acpi_device":physical_node_list->"struct acpi_device_physical_node"[color=blue];
	subgraph cluster_struct_acpi_device_physical_node{
		label="struct acpi_device_physical_node";
		"struct acpi_device_physical_node"[label="{
			unsigned int node_id|
			struct list_head node|
			struct device *dev|
			bool put_online:1|
			}"];
	}

	subgraph cluster_struct_fwnode_handle{
		label="struct fwnode_handle";
		"struct fwnode_handle"[label="{
		 enum fwnode_type type;
        	|struct fwnode_handle *secondary;
	}"];
	}
	note01[label="{typedef void *acpi_handle}" color=red bgcolor=green];

	"struct acpi_device":fwnode->"struct fwnode_handle"[color=red];
	"struct acpi_device":handle->note01[color=red];

	subgraph cluster_union_acpi_object{
		label="union acpi_object";
		node[style = filled];
		node01[label="acpi_object_type type"];
		node02[label="struct integer|
                acpi_object_type type----ACPI_TYPE_INTEGER
                |u64 value;
        	"];
		node03[label="struct string|acpi_object_type type
                |u32 length
                |char *pointer"];

		node04[label="{struct buffer|acpi_object_type type
                |u32 length;
                u8 *pointer; }"];
		node05[label="{struct package|acpi_object_type type|
                u32 count|
                union acpi_object *elements}"];
		node06[label="{struct reference|acpi_object_type type|
                acpi_object_type actual_type|
                acpi_handle handle;}"];

		node07[label="{struct processor| acpi_object_type type
                |u32 proc_id;
                |acpi_io_address pblk_address;
                |u32 pblk_length;
		}"];
		
		node08[label="{struct power_resource|acpi_object_type type
                |u32 system_level;
                |u32 resource_order;
		}"];

	}

	subgraph cluster_struct_platform_device{
		label="struct platform_device";
		"struct platform_device"[
		label="{
			|<device>struct device
		}"
	];
	}

	subgraph cluster_struct_device{
		label="struct device";
		"struct device"[label="{
			|struct device       *parent
			|<driver_data>void     *driver_data;
			|<device_driver>struct device_driver *driver
			|<fwnode>struct fwnode_handle  *fwnode
			|struct device_node    *of_node
		}"
		];
	}


	"struct acpi_device":pnp->"struct acpi_device_pnp"[color=blue];
	subgraph cluster_struct_acpi_device_pnp{
		label="struct acpi_device_pnp";
		"struct acpi_device_pnp"[label="{
		|acpi_bus_id bus_id;
		|struct acpi_pnp_type type
		|acpi_bus_address bus_address
		|char *unique_id;
		|<ids>struct list_head ids;
		|acpi_device_name device_name;
		|acpi_device_class device_class
		|union acpi_object *str_obj

		}"];
	}

	subgraph cluster_struct_acpi_hardware_id{
		label="struct acpi_hardware_id";
		"struct acpi_hardware_id"[label="{
			struct list_head list|const char *id
		}"];
	}

	 "struct acpi_device_pnp":ids->"struct acpi_hardware_id"[color=red];

	 "struct device":fwnode->"struct acpi_device":fwnode[arrowhead=none label="cast from device" color=blue];

	subgraph cluster_struct_device_driver{
		label="struct device_driver";
		"struct device_driver"[label="{
			|const struct of_device_id   *of_match_table|<acpi_device_id>const struct acpi_device_id *acpi_match_table
			}"];
	}
	"struct device":device_driver->"struct device_driver"[color=red];
	"struct device_driver":acpi_device_id->"struct acpi_device_id"[color=blue];
	"struct device":fwnode->"struct fwnode_handle"[color=blue];
	 "struct platform_device":device->"struct device"[color=red];
	 "struct device":driver_data->"struct dw_i2c_dev"[color=red];

	subgraph cluster_struct_dw_i2c_dev{
		label="struct dw_i2c_dev";
		"struct dw_i2c_dev"[label="{
		struct device           *dev;
        |void __iomem            *base;
        |struct completion       cmd_complete;
        |struct mutex            lock;
        |struct clk              *clk;
        |u32                     (*get_clk_rate_khz) (struct dw_i2c_dev *dev);
        |struct dw_pci_controller *controller;
        |int                     cmd_err;
        |struct i2c_msg          *msgs;
        |int                     msgs_num;
        |int                     msg_write_idx;
        |u32                     tx_buf_len;
        |u8                      *tx_buf;
        |int                     msg_read_idx;
        |u32                     rx_buf_len;
        |u8                      *rx_buf;
        |int                     msg_err;
        |unsigned int            status;
        |u32                     abort_source;
        |int                     irq;
        |u32                     accessor_flags;
        |<adapter>struct i2c_adapter      adapter;
        |u32                     functionality;
        |u32                     master_cfg;
        |unsigned int            tx_fifo_depth;
        |unsigned int            rx_fifo_depth;
        |int                     rx_outstanding;
        |u32                     sda_hold_time;
        |u32                     sda_falling_time;
        |u32                     scl_falling_time;
        |u16                     ss_hcnt;
        |u16                     ss_lcnt;
        |u16                     fs_hcnt;
        |u16                     fs_lcnt;
        |int                     (*acquire_lock)(struct dw_i2c_dev *dev);
        |void                    (*release_lock)(struct dw_i2c_dev *dev);
        |bool                    pm_runtime_disabled;}"
	];

	}

	subgraph cluster_struct_dw_i2c_platform_data{
		label="struct dw_i2c_platform_data";
		"struct dw_i2c_platform_data"[label="{
		unsigned int i2c_scl_freq;
	}"];
	}

	subgraph cluster_struct_i2c_adapter{
		label="struct i2c_adapter";
		"struct i2c_adapter"[label="{
		struct module *owner;
        |unsigned int class
        |<algo>const struct i2c_algorithm *algo
        |void *algo_data
        |struct rt_mutex bus_lock;
        |int timeout
        |int retries;
        |<dev>struct device dev
        |int nr;
        |char name[48];
        |struct completion dev_released;
        |struct mutex userspace_clients_lock;
        |struct list_head userspace_clients;
        |struct i2c_bus_recovery_info *bus_recovery_info;
        |const struct i2c_adapter_quirks *quirks;
	}"];
	}
	"struct i2c_adapter":dev->"struct device"[color=blue];
	"struct dw_i2c_dev":adapter->"struct i2c_adapter"[color=red];
	"struct i2c_adapter":algo->"struct i2c_algorithm"[color=red];
	
	subgraph cluster_struct_acpi_device_id{
		label="struct acpi_device_id";
		"struct acpi_device_id"[label="{
		|__u8 id[ACPI_ID_LEN]
        |kernel_ulong_t driver_data;
        |__u32 cls;
        |__u32 cls_msk;
	}"];
	}

	subgraph cluster_struct_i2c_algorithm{
		label="struct i2c_algorithm";
		"struct i2c_algorithm"[label="{
		int (*master_xfer)(struct i2c_adapter *adap|struct i2c_msg *msgs,
                           int num)
        |int (*smbus_xfer) (struct i2c_adapter *adap, u16 addr,|
                           unsigned short flags, char read_write,|
                           u8 command, int size, union i2c_smbus_data *data);|

        To determine what the adapter supports 
        |u32 (*functionality) (struct i2c_adapter *); 

|#if IS_ENABLED(CONFIG_I2C_SLAVE)
        |int (*reg_slave)(struct i2c_client *client);
        |int (*unreg_slave)(struct i2c_client *client);
|#endif

	}"];
	}

	subgraph cluster_struct_i2c_driver{
		label="struct i2c_driver";
		"struct i2c_driver"[label="{
		 int (*attach_adapter)(struct i2c_adapter *) __deprecated;
		|int (*probe)(struct i2c_client *, const struct i2c_device_id *);
		|int (*remove)(struct i2c_client *);
		|void (*shutdown)(struct i2c_client *);
		|void (*alert)(struct i2c_client *, unsigned int data);
		|int (*command)(struct i2c_client *client, unsigned int cmd, void *arg);
		|struct device_driver driver;
		|const struct i2c_device_id *id_table
		|int (*detect)(struct i2c_client *, struct i2c_board_info *);
		|const unsigned short *address_list;
        	|struct list_head clients;
	}"];
	}
	
	subgraph cluster_struct_i2c_client{
		label="struct i2c_client";
		"struct i2c_client"[label="{
		unsigned short flags
		|unsigned short addr
		|char name[I2C_NAME_SIZE]
		|<adapter>struct i2c_adapter *adapter
		|struct device dev;
		|int irq
		|struct list_head detected
		|i2c_slave_cb_t slave_cb
	}"];
	}
	"struct i2c_client":adapter->"struct i2c_adapter"[color=blue];

	subgraph cluster_struct_pmic_i2c_dev{
		label="struct pmic_i2c_dev";
		"struct pmic_i2c_dev"[label="{
		int irq;
        |u32 pmic_intr_sram_addr;
        |<adapter>struct i2c_adapter adapter;
        |int i2c_rw;
        |wait_queue_head_t i2c_wait;
        |struct mutex i2c_pmic_rw_lock;
        |struct device *dev;
	}"];
	}
	"struct pmic_i2c_dev":adapter->"struct i2c_adapter"[color=green];
	
	subgraph cluster_struct_i2c_device_id{
		label="struct i2c_device_id";
		"struct i2c_device_id"[label="{
		char name[I2C_NAME_SIZE]|kernel_ulong_t driver_data
	}"];
	}

	subgraph cluster_struct_intel_soc_pmic{
		label="struct intel_soc_pmic";
		"struct intel_soc_pmic"[label="{
		const char                      *label;
        |struct device                   *dev;
        |struct mutex                    io_lock;
        |struct mutex                    irq_lock;
        |int                             irq_need_update;
        |int                             irq;
        |unsigned long                   irq_flags;
        |int                             irq_num;
        |int                             irq_base;
        |unsigned long                   irq_mask[INTEL_PMIC_IRQ_MAX/32];
        |int                             pmic_int_gpio;
        |int                             default_client;
        |int                             (*init)(void);
        |int                             (*readb)(int);
        |int                             (*writeb)(int, u8);
        |struct intel_pmic_irqregmap     *irq_regmap;
        |<mfd>struct mfd_cell                 *cell_dev;
        |struct intel_pmic_opregion      *opregion;
	}"];
	}

	subgraph cluster_struct_cell_dev_pdata{
		label="struct cell_dev_pdata";
		"struct cell_dev_pdata"[label="{
		struct list_head    list;
		|<name>const char      *name;
		|<data>void            *data;
		|<len>int         len;
		|int         id;

		}"];
	}

	"struct intel_soc_pmic":mfd->"struct mfd_cell"[color=red];
	subgraph cluster_struct_mfd_cell{
		label="struct mfd_cell";
		"struct mfd_cell"[label="{
		|<name>const char              *name|
		 int                     id|
		atomic_t                *usage_count|
		int                     (*enable)(struct platform_device *dev);
		|int                     (*disable)(struct platform_device *dev);
		|int                     (*suspend)(struct platform_device *dev);
		|int                     (*resume)(struct platform_device *dev);
		|<data>void                    *platform_data;
		|<size>size_t                  pdata_size;
		|const struct property_set *pset;
		|const char              *of_compatible
		|const struct mfd_cell_acpi_match        *acpi_match;
		| int                     num_resources
		|const struct resource   *resources
		|bool                    ignore_resource_conflicts
		|bool                    pm_runtime_no_callbacks;
		|const char * const      *parent_supplies;
		|int                     num_parent_supplies

	}"];
	}

	"struct mfd_cell":data->"struct cell_dev_pdata":data[arrowhead=none]; "struct mfd_cell":size->"struct cell_dev_pdata":len[arrowhead=none];
	"struct cell_dev_pdata":data->"struct mfd_cell":data[arrowhead=none label="赋值"]
	"struct cell_dev_pdata":name-> "struct mfd_cell":name[arrowhead=none color=blue label="match"];
	"struct i2c_device_id"->"struct intel_soc_pmic"[arrowhead=none color=red label="whiskey_cove_pmic"];

	subgraph cluster_struct_uart_driver{
			label="struct uart_driver";
			bgcolor="pink";
			"struct uart_driver"[label="{
				struct module       *owner
				|const char      *driver_name
				|const char      *dev_name
				|int          major
				|int          minor
				|int          nr|struct console      *cons
				|<state>struct uart_state   *state
				|<tty_driver>struct tty_driver   *tty_driver
				}"];
		}

		"struct uart_driver":tty_driver->"struct tty_driver"[color=red];

	subgraph cluster_struct_tty_driver{
		   label="struct tty_driver";
		   bgcolor="yellow";
		   "struct tty_driver"[label="{
				int magic
				|struct kref kref
				|struct cdev **cdevs
				|struct module   *owner
				|const char  *driver_name
				| const char  *name
				|int name_base
				|int major
				|int minor_start
				|unsigned int    num
				|short   type
				|short   subtype
				|struct ktermios init_termios
				|unsigned long   flags
				|struct proc_dir_entry *proc_entry
				|struct tty_driver *other
				|<tty_struct>struct tty_struct **ttys
				|<tty_port>struct tty_port **ports|struct ktermios **termios|<state>void *driver_state
				|<ops>const struct tty_operations *ops|struct list_head tty_drivers
			}"];
	}
	"struct tty_driver":tty_port->"struct tty_port"[color=blue];
	"struct tty_driver":tty_struct->"struct tty_struct"[color=blue];
	"struct tty_driver":state->"struct uart_driver"[color=blue];
	"struct tty_driver":ops->"struct tty_operations"[color=red];

	subgraph cluster_struct_tty_operations{
		label="struct tty_operations";
		bgcolor="powderblue";
		"struct tty_operations"[label="{
	struct tty_struct * (*lookup)(struct tty_driver *driver,
    \n struct inode *inode, int idx)
    |int  (*install)(struct tty_driver *driver, struct tty_struct *tty);
    |void (*remove)(struct tty_driver *driver, struct tty_struct *tty);
    |int  (*open)(struct tty_struct * tty, struct file * filp);
    |void (*close)(struct tty_struct * tty, struct file * filp);
    |void (*shutdown)(struct tty_struct *tty);
    |void (*cleanup)(struct tty_struct *tty);
    |int  (*write)(struct tty_struct * tty,
              \n const unsigned char *buf, int count);
    |int  (*put_char)(struct tty_struct *tty, unsigned char ch);
    |void (*flush_chars)(struct tty_struct *tty);
    |int  (*write_room)(struct tty_struct *tty);
    |int  (*chars_in_buffer)(struct tty_struct *tty);
    |int  (*ioctl)(struct tty_struct *tty,
            \n unsigned int cmd, unsigned long arg);
    |long (*compat_ioctl)(struct tty_struct *tty,
                 \nunsigned int cmd, unsigned long arg);
    |void (*set_termios)(struct tty_struct *tty, struct ktermios * old);
    |void (*throttle)(struct tty_struct * tty);
    |void (*unthrottle)(struct tty_struct * tty);
    |void (*stop)(struct tty_struct *tty);
    |void (*start)(struct tty_struct *tty);
    |void (*hangup)(struct tty_struct *tty);
    |int (*break_ctl)(struct tty_struct *tty, int state);
    |void (*flush_buffer)(struct tty_struct *tty);
    |void (*set_ldisc)(struct tty_struct *tty);
    |void (*wait_until_sent)(struct tty_struct *tty, int timeout);
    |void (*send_xchar)(struct tty_struct *tty, char ch);
    |int (*tiocmget)(struct tty_struct *tty);
    |int (*tiocmset)(struct tty_struct *tty,
            \nunsigned int set, unsigned int clear);
    |int (*resize)(struct tty_struct *tty, struct winsize *ws);
    |int (*set_termiox)(struct tty_struct *tty, struct termiox *tnew);
    |int (*get_icount)(struct tty_struct *tty,
                \nstruct serial_icounter_struct *icount);
    |int (*poll_init)(struct tty_driver *driver, int line, char *options);
    |int (*poll_get_char)(struct tty_driver *driver, int line);
    |void (*poll_put_char)(struct tty_driver *driver, int line, char ch);
    |const struct file_operations *proc_fops;
	}"];
	}

	subgraph cluster_struct_tty_struct{
		label="struct tty_struct";
		"struct tty_struct"[label="{
		|int magic;
		|struct kref kref;
		|struct device *dev;
		|<driver>struct tty_driver *driver;
		|const struct tty_operations *ops;
		|int index;
		|struct ld_semaphore ldisc_sem;
		|struct tty_ldisc *ldisc;
		|struct mutex atomic_write_lock;
		|struct mutex legacy_mutex;
		|struct mutex throttle_mutex;
		|struct rw_semaphore termios_rwsem;
		|struct mutex winsize_mutex;
		|spinlock_t ctrl_lock;
		|spinlock_t flow_lock;
		|......
		|wait_queue_head_t write_wait;
		|wait_queue_head_t read_wait;
		|struct work_struct hangup_work;
		|void *disc_data;
		|void *driver_data;
		|struct list_head tty_files;
		|......
		|struct work_struct SAK_work;
		|struct tty_port *port;
			}"];
	}
	 "struct tty_struct":driver->"struct tty_driver"[color=red];

	subgraph cluster_struct_uart_state{
		label="struct uart_state";
		"struct uart_state"[label="{
			|<tty_port>struct tty_port     port
			|enum uart_pm_state  pm_state
			|struct circ_buf     xmit
			|<port>struct uart_port    *uart_port
			}"];
	}
	 "struct uart_state":tty_port->"struct tty_port"[color=red label="tty_bufhead用于存储uart的数据"];

	subgraph cluster_struct_tty_port{
		label="struct tty_port";
		"struct tty_port"[label="{
			struct tty_bufhead  buf
			|struct tty_struct   *tty
			|struct tty_struct   *itty
			|const struct tty_port_operations *ops
			|spinlock_t      lock
			|int         blocked_open
			|int         count
			|wait_queue_head_t   open_wait
			|wait_queue_head_t   delta_msr_wait
			|unsigned long       flags
			|unsigned char       console:1
			|unsigned char low_latency:1
			|struct mutex        mutex
			|struct mutex        buf_mutex
			|unsigned char       *xmit_buf
			|unsigned int        close_delay
			|unsigned int        closing_wait
			|int         drain_delay
			|struct kref     kref
		}"];
	}

	"struct uart_state":port->"struct uart_port"[color=red];

	subgraph cluster_struct_uart_8250_port{
		label="struct uart_8250_port";
		"struct uart_8250_port"[label="{
			|<port>struct uart_port    port
			|struct timer_list   timer
			|struct list_head    list
			|unsigned short      capabilities
			|unsigned short      bugs
			|bool            fifo_bug
			|unsigned int        tx_loadsz
			|unsigned char       acr
			|unsigned char       fcr
			|unsigned char       ier
			|unsigned char       lcr
			|unsigned char       mcr
			|unsigned char       mcr_mask
			|unsigned char       mcr_force
			|unsigned char       cur_iotype
			|unsigned int        rpm_tx_active
			|unsigned char       canary
			|unsigned char       probe
			|unsigned char       lsr_saved_flags
			|unsigned char       msr_saved_flags
			|struct uart_8250_dma    *dma
			|const struct uart_8250_ops *ops
			|int    (*dl_read)(struct uart_8250_port *)
			|void   (*dl_write)(struct uart_8250_port *, int)
		}"];
	}
	"struct uart_8250_port"->"serial8250_ports[UART_NR]"[color=blue arrowhead=none];
	"struct uart_8250_port":port->"struct uart_port"[color=red];
	subgraph cluster_struct_uart_port{
		label="struct uart_port";
		"struct uart_port"[label="{
			spinlock_t      lock
			|unsigned long       iobase
			|..........
			|unsigned char __iomem   *membase
			|.........
			|int  (*startup)(struct uart_port *port)
			|void (*shutdown)(struct uart_port *port)
			|int  (*handle_irq)(struct uart_port *)
			|........
			|unsigned int        irq;
			|unsigned int        uartclk
			|unsigned int        fifosize
			|unsigned char       x_char
			|..........
			|unsigned char       iotype
			|..........
			|<state>struct uart_state   *state
			|struct uart_icount  icount------串口统计信息
			|........
			|<ops>const struct uart_ops   *ops
			|.........
			|struct attribute_group  *attr_group
			|const struct attribute_group **tty_groups
			|.......
			|struct device       *dev
			|unsigned char       hub6
			|unsigned char       suspended
			|unsigned char       irq_wake
			|..........
		}"];
	}

	"struct uart_port":state->"struct uart_state"[color=blue];
	"struct uart_port":ops->"struct uart_ops"[color=blue];
	"struct uart_port":ops->"const struct uart_ops serial8250_pops"[color=red arrowhead=none];

	subgraph cluster_struct_uart_ops{
		label="struct uart_ops";
		"struct uart_ops"[label="{
			 unsigned int (*tx_empty)(struct uart_port *)
			 |void  (*set_mctrl)(struct uart_port *, unsigned int mctrl)
			 |unsigned int  (*get_mctrl)(struct uart_port *)
			 |void  (*stop_tx)(struct uart_port *)
			 |void  (*start_tx)(struct uart_port *)
			 |void  (*throttle)(struct uart_port *)
			 |void  (*unthrottle)(struct uart_port *)
			 |void  (*send_xchar)(struct uart_port *, char ch)
			 |void  (*stop_rx)(struct uart_port *)
			 |void  (*enable_ms)(struct uart_port *)
			 |void  (*break_ctl)(struct uart_port *, int ctl)
			 |int   (*startup)(struct uart_port *)
			 |void  (*shutdown)(struct uart_port *)
			 |void  (*flush_buffer)(struct uart_port *)
			 |void (*set_termios)(struct uart_port *, struct ktermios *new,
			 |void  (*set_ldisc)(struct uart_port *, struct ktermios *)
			 |void        (*pm)|const char  *(*type)(struct uart_port *)|
			 void        (*release_port)|int     (*request_port)|void        (*config_port)	 
			
		}"];
	}

	"struct uart_driver":state->"struct uart_state"[color=red];

	subgraph cluster_struct_hci_uart{
		label="struct hci_uart";
		bgcolor="green";
		"struct hci_uart"[label="{
			struct tty_struct   *tty
			|<hdev>struct hci_dev      *hdev
			|unsigned long       flags
			|unsigned long       hdev_flags
			|struct work_struct  init_ready
			|struct work_struct  write_work
			|const struct hci_uart_proto *proto
			|<priv>void            *priv
			|struct sk_buff      *tx_skb
			|unsigned long       tx_state
			|unsigned int init_speed
			|unsigned int oper_speed
		}"];
	}

	subgraph cluster_struct_sk_buff{
		label="struct sk_buff";
		bgcolor="pink";
		"struct sk_buff"[label=<
			<table>
				<tr>
					<td>
						<table>
						<tr>
						<td>struct sk_buff  *next</td>
						</tr>
						<tr>
						<td> struct sk_buff  *prev</td>
						</tr>
						<tr>
							<td>
								ktime_t     tstamp
							</td>
							<td>
								struct skb_mstamp skb_mstamp
							</td>
						</tr>
						</table>
					</td>
					<td>
						struct rb_node rbnode----tcp stack
					</td>
				</tr>
				<tr><td>struct sock     *sk</td></tr>
				<tr><td>struct net_device   *dev</td></tr>
				<tr><td>char   cb[48] __aligned(8)</td></tr>
				<tr><td>............</td></tr>
				<tr><td>sk_buff_data_t      tail</td></tr>
				<tr><td>sk_buff_data_t      end</td></tr>
				<tr><td>unsigned char       *head</td></tr>
				<tr><td>unsigned char  *data</td></tr>
				<tr><td>............</td></tr>
			</table>
		>];
	}

	"struct sk_buff"->"struct bt_skb_cb"[color=red];
	subgraph cluster_struct_bt_skb_cb{
		label="struct bt_skb_cb";
		"struct bt_skb_cb"[label="{
			__u8 pkt_type|__u8 force_active| __u16 expect
			|__u8 incoming:1;|struct l2cap_ctrl l2cap|struct hci_ctrl hci
		}"];
	}

	subgraph cluster_struct_h4_recv_pkt{
		label="struct h4_recv_pkt";
		"struct h4_recv_pkt"[label="{
			u8  type|u8  hlen|u8  loff|u8  lsize|u16 maxlen|
			int (*recv)(struct hci_dev *hdev, struct sk_buff *skb)
		}"];
	}
	"struct hci_uart"->"struct h4_recv_pkt"[color=blue];

	"struct hci_uart":hdev->"struct hci_dev"[color=blue];
	subgraph cluster_struct_h4_struct{
		label="struct h4_struct";
		"struct h4_struct"[label="{
			|<rx_skb>struct sk_buff *rx_skb|struct sk_buff_head txq
		}"];
	}
	"struct h4_struct":rx_skb->"struct sk_buff"[color=blue];
	"struct hci_uart":priv->"struct h4_struct"[color=red arrowhead=none];

	subgraph cluster_struct_hci_dev{
		label="struct hci_dev";
		"struct hci_dev"[label="{
			struct list_head list
			|struct mutex    lock
			|char        name[8]
			|unsigned long   flags
			|.......
			|unsigned long   acl_last_tx
			|unsigned long   sco_last_tx
			|unsigned long   le_last_tx
			|struct workqueue_struct *workqueue
			|struct workqueue_struct *req_workqueue
			|struct work_struct  power_on
			|struct delayed_work power_off
			|struct work_struct  error_reset
			|__u16           discov_timeout
			|struct delayed_work discov_off
			|struct delayed_work service_cache
			|struct delayed_work cmd_timer
			|struct work_struct  rx_work
			|struct work_struct  cmd_work
			|struct work_struct  tx_work
			|struct sk_buff_head rx_q
			|struct sk_buff_head raw_q
			|struct sk_buff_head cmd_q
			|struct sk_buff      *sent_cmd|........|struct hci_dev_stats    stat|......
			|<dev>struct device       dev|struct rfkill       *rfkill
			|struct delayed_work le_scan_disable
			|struct delayed_work le_scan_restart
			|.......|int (*open)(struct hci_dev *hdev)--- hci_uart_open
			|int (*close)(struct hci_dev *hdev)---hci_uart_close
			|int (*flush)(struct hci_dev *hdev)---hci_uart_flush
			|int (*setup)(struct hci_dev *hdev)---hci_uart_setup
			|int (*shutdown)(struct hci_dev *hdev)
			|int (*send)(struct hci_dev *hdev, struct sk_buff *skb)--hci_uart_send_frame
			|void (*notify)(struct hci_dev *hdev, unsigned int evt)
			|......|int (*set_bdaddr)(struct hci_dev *hdev, const bdaddr_t *bdaddr)
		}"];
	}
		 "struct hci_dev":dev->"struct hci_uart"[color=blue label="dev->drv_data"];

		subgraph cluster_struct_plat_serial8250_port{
			label="struct plat_serial8250_port";
			bgcolor="brown";
			"struct plat_serial8250_port"[label="{
				unsigned long   iobase
				|void __iomem    *membase
				|resource_size_t mapbase
				|unsigned int    irq
				|unsigned long   irqflags
				|unsigned int    uartclk
				|void   *private_data
				|unsigned char   regshift
				|unsigned char   iotype
				|unsigned char   hub6
				|upf_t       flags
				|unsigned int    type
				|unsigned int  (*serial_in)(struct uart_port *, int)
				|void   (*serial_out)(struct uart_port *, int, int)
				|int     (*handle_irq)(struct uart_port *)
				| void        (*pm)|......
			}"];
		}

}
