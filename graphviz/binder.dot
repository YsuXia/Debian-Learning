digraph binder{
	node[shape=record];
	subgraph cluster_struct_binder_transaction_data{
		label="struct binder_transaction_data";
		"struct binder_transaction_data"[label=<
			<table>
				<tr>
					<td>
						<table>
							<tr>
								<td>__u32 handle</td>
								<td>binder_uintptr_t ptr</td>
							</tr>
						</table>
					</td>
				</tr>
				<tr>
					<td>binder_uintptr_t cookie</td>
				</tr>
				<tr>
					<td>__u32 code</td>
				</tr>
				<tr>
					<td>__u32 flags</td>
				</tr>
				<tr>
					<td>pid_t sender_pid</td>
				</tr>
				<tr>
					<td>uid_t sender_euid</td>
				</tr>
				<tr>
					<td>binder_size_t data_size</td>
				</tr>
				<tr>
					<td>
						<table>
							<tr>
								<td>binder_uintptr_t buffer</td>
							</tr>
							<tr>
								<td>binder_uintptr_t offsets</td>
							</tr>
						</table>
					</td>
					<td>_u8 buf[8]</td>
				</tr>
			</table>
		>];
	}

	subgraph cluster_struct_binder_state{
		label="struct binder_state";
		"struct binder_state"[label="{
		 int fd;
    	|void *mapped;
    	|size_t mapsize;
		}"];
	}

	subgraph cluster_struct_binder_io{
		label="struct binder_io";
		bgcolor="pink";
		"struct binder_io"[label="{
		char *data
    	|binder_size_t *offs
    	|size_t data_avail
    	|size_t offs_avail
    	|char *data0;
    	|binder_size_t *offs0;
    	|uint32_t flags;
    	|uint32_t unused;
	}"];
	}

	subgraph cluster_struct_svcinfo{
		label="struct svcinfo";
		"struct svcinfo"[label="{
		struct svcinfo *next;
    |uint32_t handle;
    |struct binder_death death;
    |int allow_isolated;
    |size_t len;
    |uint16_t name[0];
	}"];
	}

	


}


