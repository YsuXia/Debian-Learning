digraph libnl{
	node[shape=record];
	subgraph cluster_struct_sdio_func{
		label="struct sdio_func";
		"struct sdio_func"[label="{
	<card>struct mmc_card     *card----the card this device belongs to
    |struct device       dev----the device
    |sdio_irq_handler_t  *irq_handler-----IRQ callback
    |unsigned int        num----function number
    |unsigned char       class-----standard interface class
    |unsigned short      vendor------vendor id
    |unsigned short      device------device id
    |unsigned        max_blksize------maximum block size
    |unsigned        cur_blksize------current block size
    |unsigned        enable_timeout-----max enable timeout in msec
    |unsigned int        state----function state
    |u8          tmpbuf[4]-----DMA able scratch buffer
    |unsigned        num_info-----number of info strings
    |const char      **info------info strings
    |struct sdio_func_tuple *tuples
		}"];
	}

	"struct sdio_func":card->"struct mmc_card"[color=red];
	subgraph cluster_struct_mmc_card{
		label="struct mmc_card";
		"struct mmc_card"[label="{
			|struct mmc_host     *host*****the host this device belongs to
    |struct device       dev
    |u32         ocr*******the current OCR setting
    |unsigned int        rca******relative card address of device
    |unsigned int        type*******card type
    |unsigned int        state******card state
    |unsigned int        quirks****** card quirks
    |unsigned int        erase_size
    |unsigned int        erase_shift
    |unsigned int        pref_erase
    |unsigned int        eg_boundary
    |u8          erased_byte
	|u32         raw_cid[4]
    |u32         raw_csd[4]
    |u32         raw_scr[2]
    |struct mmc_cid      cid******card identification
    |struct mmc_csd      csd********card specific
    |struct mmc_ext_csd  ext_csd*******mmc v4 extended card specific
    |struct sd_scr       scr******extra SD information
    |struct sd_ssr       ssr*******yet more SD information
    |struct sd_switch_caps   sw_caps********switch (CMD6) caps
    |unsigned int        sdio_funcs******number of SDIO functions
    |struct sdio_cccr    cccr*******common card info
    |struct sdio_cis     cis************common tuple info
    |struct sdio_func    *sdio_func[SDIO_MAX_FUNCS]
    |struct sdio_func    *sdio_single_irq****SDIO function when only one IRQ active
    |unsigned        num_info
    |const char      **info
    |struct sdio_func_tuple  *tuples
    |unsigned int        sd_bus_speed
    |unsigned int        mmc_avail_type
    |unsigned int        drive_strength******for UHS-I, HS200 or HS400
    |struct dentry       *debugfs_root;
    |struct mmc_part part[MMC_NUM_PHY_PARTITION]
    |unsigned int    nr_parts
		}"];
	}

	subgraph cluster_struct_sdioh_info{
		label="struct sdioh_info";
		"struct sdioh_info"[label="{
		osl_t       *osh------osh handler
    |void        *bcmsdh------upper layer handle
    |bool        client_intr_enabled-----interrupt connnected flag
    |bool        intr_handler_valid---client driver interrupt handler valid
    |sdioh_cb_fn_t   intr_handler---registered interrupt handler
    |void        *intr_handler_arg---argument to call interrupt handler
    |uint16      intmask----Current active interrupts

    |int     intrcount---Client interrupts
    |bool        sd_use_dma----DMA on CMD53
    |bool        sd_blockmode----FALSE:64 Byte Cmd 53s
                        \nMust be on for sd_multiblock to be effective
    |bool        use_client_ints---If this is false, make sure to restore
    |int     sd_mode---SD1\/SD4\/SPI
    |int     client_block_size[SDIOD_MAX_IOFUNCS]------Blocksize
    |uint8       num_funcs-----Supported funcs on client
    |uint32      com_cis_ptr
    |uint32      func_cis_ptr[SDIOD_MAX_IOFUNCS]
    |bool        use_rxchain
    |struct scatterlist  sg_list[SDIOH_SDMMC_MAX_SG_ENTRIES]
    |struct sdio_func    fake_func0;
    |struct sdio_func    *func[SDIOD_MAX_IOFUNCS];
    |uint    txglom_mode-----Txglom mode
	}"];
	}

	subgraph cluster_struct_bcmsdh_os_info{
		label="struct bcmsdh_os_info";
		"struct bcmsdh_os_info"[label="{

		}"];
	}
}
