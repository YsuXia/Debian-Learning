digraph usb{

	node[shape=record];
	subgraph cluster_struct_usb_driver{
		label="struct usb_driver";
		"struct usb_driver"[label="{
    const char *name;|
    int (*probe) (struct usb_interface *intf, const struct usb_device_id *id)|
    void (*disconnect) (struct usb_interface *intf)|
    int (*unlocked_ioctl) (struct usb_interface *intf, unsigned int code,\n
            void *buf);|
    int (*suspend) (struct usb_interface *intf, pm_message_t message);|
    int (*resume) (struct usb_interface *intf);|
    int (*reset_resume)(struct usb_interface *intf);|

    int (*pre_reset)(struct usb_interface *intf);|
    int (*post_reset)(struct usb_interface *intf);|

    <table>const struct usb_device_id *id_table;|

    struct usb_dynids dynids;|
    struct usbdrv_wrap drvwrap;|
    unsigned int no_dynamic_id:1;|
    unsigned int supports_autosuspend:1;|
    unsigned int disable_hub_initiated_lpm:1;|
    unsigned int soft_unbind:1;
	}"];
	};

	subgraph cluster_struct_usb_device_id{
		label="struct usb_device_id";
		"struct usb_device_id"[label="{
	__u16       match_flags;|
    __u16       idVendor;|
    __u16       idProduct;|
    __u16       bcdDevice_lo;|
    __u16       bcdDevice_hi;|
    __u8        bDeviceClass;|
    __u8        bDeviceSubClass;|
    __u8        bDeviceProtocol;|
    __u8        bInterfaceClass;|
    __u8        bInterfaceSubClass;|
    __u8        bInterfaceProtocol;|
    __u8        bInterfaceNumber;|
    kernel_ulong_t  driver_info __attribute__((aligned(sizeof(kernel_ulong_t))));
	}"];
	}
	"struct usb_driver":table->"struct usb_device_id"[arrowhead=open color=red label="id_table"];

	subgraph cluster_struct_usb_skel{
		label="struct usb_skel";
		"struct usb_skel"[label="{
		struct usb_device   *udev|
    	struct usb_interface    *interface|
    	struct semaphore    limit_sem\n
    	****limiting the number of writes in progress****|
    	struct usb_anchor   submitted\n
		****in case we need to retract our submissions****|
    	struct urb      *bulk_in_urb|
    	unsigned char           *bulk_in_buffer\n
		****the buffer to receive data****|
    	size_t          bulk_in_size|
    	size_t          bulk_in_filled|
    	size_t          bulk_in_copied|
    	__u8            bulk_in_endpointAddr\n *****the address of the bulk in endpoint*****|
    	__u8            bulk_out_endpointAddr\n*****the address of the bulk out endpoint*****|
    	int         errors\n****the last request tanked****|
    	bool            ongoing_read\n****a read is going on****|
    	spinlock_t      err_lock|
    	struct kref     kref|
    	struct mutex        io_mutex\n***synchronize I/O with disconnect***|
    	wait_queue_head_t   bulk_in_wait\n***to wait for an ongoing read***
	}"];
    }

   subgraph cluster_struct_usb_interface{
		label="struct usb_interface";
		"struct usb_interface"[label="{
	struct usb_host_interface *altsetting;|
    struct usb_host_interface *cur_altsetting\n ***the currently active alternate setting***|
    unsigned num_altsetting\n***number of alternate settings***|
    ***If there is an interface association descriptor\n
    then it will list the associated interfaces***\n
    struct usb_interface_assoc_descriptor *intf_assoc;|
    int minor;\n***minor number this interface is bound to***|
    enum usb_interface_condition condition;|
    unsigned sysfs_files_created:1;\n***the sysfs attributes exist***|
    unsigned ep_devs_created:1;\n***endpoint \"devices\" exist***|
    unsigned unregistering:1;|
    unsigned needs_remote_wakeup:1;\n***driver requires remote wakeup***|
    unsigned needs_altsetting0:1;\n***switch to altsetting 0 is pending***|
    unsigned needs_binding:1;\n***needs delayed unbind rebind***|
    unsigned resetting_device:1;\n***true: bandwidth alloc after reset***|
    unsigned authorized:1;\n***used for interface authorization***|
    struct device dev;|
    struct device *usb_dev;|
    atomic_t pm_usage_cnt;\n***usage counter for autosuspend***|
    struct work_struct reset_ws;\n***for resets in atomic context***
	}"];
   }

   subgraph cluster_struct_urb{
		label="struct urb";
		bgcolor="purple";
		"struct urb"[label="{
	struct kref kref;
    |void *hcpriv;
    |atomic_t use_count;
    |atomic_t reject;
    |int unlinked;
    |struct list_head urb_list;
    |struct list_head anchor_list;
    |struct usb_anchor *anchor;
    |struct usb_device *dev;
    |struct usb_host_endpoint *ep;
    |unsigned int pipe;
    |unsigned int stream_id;
    |int status;
    |unsigned int transfer_flags;
    |void *transfer_buffer;
    |dma_addr_t transfer_dma;\n***(in) dma addr for transfer_buffer***
    |struct scatterlist *sg
    |int num_mapped_sgs;\n ***(internal) mapped sg entries***
    |int num_sgs;
    |u32 transfer_buffer_length;
    |u32 actual_length;
    |unsigned char *setup_packet;\n***(in) setup packet (control only)***
    |dma_addr_t setup_dma;\n ***dma addr for setup_packet***
    |int start_frame\n ***(modify) start frame (ISO)***
    |int number_of_packets\n ***(in) number of ISO packets***
    |int interval;
    |int error_count;\n ***number of ISO errors***
    |void *context\n***(in) context for completion***
    |usb_complete_t complete;\n ***(in) completion routine***
    |struct usb_iso_packet_descriptor iso_frame_desc\[0\];
	}"];
   }

   subgraph cluster_struct_fusb30x_chip{
	   label="struct fusb30x_chip";
	   "struct fusb30x_chip"[label="{
	struct i2c_client *client;
    |struct device *dev;
    |struct regmap *regmap;
    |struct work_struct work;
    |struct workqueue_struct *fusb30x_wq;
    |struct hrtimer timer_state_machine;
    |struct hrtimer timer_mux_machine;
    |<pd_info>struct PD_CAP_INFO pd_cap_info;
    |struct notify_info notify;
    |struct notify_info notify_cmp;
    |struct extcon_dev *extcon;
    |enum connection_state conn_state;
    |struct gpio_desc *gpio_vbus_5v;
    |struct gpio_desc *gpio_vbus_other;
    |struct gpio_desc *gpio_int;
    |struct gpio_desc *gpio_discharge;
    |int timer_state;
    |int timer_mux;
    |int port_num;
    |u32 work_continue;
    |spinlock_t irq_lock;
    |int gpio_int_irq;
    |int enable_irq;
	|u8 cc_state;
    |int cc1;
    |int cc2;
    |enum typec_cc_polarity cc_polarity;
    |u8 val_tmp;
    |u8 debounce_cnt;
    |int sub_state;
    |int caps_counter;
    |u32 send_load\[7\];
    |u32 rec_load\[7\];
    |u16 send_head;
    |u16 rec_head;
    |int msg_id;
    |enum tx_state tx_state;
    |int hardrst_count;
    |u32 source_power_supply\[7\]
	|u32 source_max_current\[7\]
	|int pos_power
	|u32 partner_cap\[7\];
    |int n_caps_used;
    |int vdm_state;
    |int vdm_substate;
    |int vdm_send_state;
    |u16 vdm_svid\[12\];
    |int vdm_svid_num;
    |u32 vdm_id;
    |u8 chip_id;
    |bool vconn_enabled;
    |bool is_pd_support;
    |int pd_output_vol;
    |int pd_output_cur;
    |int cc_meas_high;
    |int cc_meas_low;
    |bool vbus_begin;
    |enum role_mode role;
    |bool vconn_supported;
    |bool try_role_complete;
    |enum role_mode try_role;
    |struct input_dev *input;
    |bool suspended;
   }"];
   }

subgraph cluster_struct_PD_CAP_INFO{
	label="struct PD_CAP_INFO";
	"struct PD_CAP_INFO"[label="{
	|u32 peak_current;
    |u32 specification_revision;
    |u32 externally_powered;
    |u32 usb_suspend_support;
    |u32 usb_communications_cap;
    |u32 dual_role_power;
    |u32 data_role_swap;
    |u32 supply_type;
}"];
}
"struct fusb30x_chip":pd_info->"struct PD_CAP_INFO"[label="PD的一些信息" arrowhead="open" color="blue"];

subgraph cluster_struct_dwc3_rockchip{
	label="struct dwc3_rockchip";
	"struct dwc3_rockchip"[label="{
	int         num_clocks;
    |bool            connected;
    |bool            skip_suspend;
    |bool            suspended;
    |bool            force_mode;
    |bool            reset_on_resume;
    |enum usb_dr_mode    original_dr_mode;
    |struct device       *dev;
    |struct clk      **clks;
    |struct dwc3     *dwc;
    |struct reset_control    *otg_rst;
    |struct extcon_dev   *edev;
    |struct usb_hcd      *hcd;
    |struct notifier_block   device_nb;
    |struct notifier_block   host_nb;
    |struct work_struct  otg_work;
    |struct mutex        lock;
}"];
}


}

